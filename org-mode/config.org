#+TITLE: Emacs Configuration

* Theme and appearance
Customising Emacs appearance with the goal of having it as minimal as possible:

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message ""
      inhibit-startup-message t)
;; Appearance
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . light))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(setq-default show-trailing-whitespace t)
#+END_SRC

** Dracula theme
This is a dark theme that is available for many applications.

Homepage: https://draculatheme.com/

#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :config
  (load-theme 'dracula t)
)
#+END_SRC

Theme for Terminal.app in macOS:

#+BEGIN_SRC shell
export DRACULA_THEME_LOCATION=$HOME/apps/dracula-theme
mkdir -p ~/apps/dracula-theme
git clone https://github.com/dracula/terminal-app.git $DRACULA_THEME_LOCATION/terminal

git clone https://github.com/dracula/xcode.git $DRACULA_THEME_LOCATION/xcode
mkdir -p ~/Library/Developer/Xcode/UserData/FontAndColorThemes/
ln -s $DRACULA_THEME/Dracula.xccolortheme ~/Library/Developer/Xcode/UserData/FontAndColorThemes/Dracula.xccolortheme
#+END_SRC

** Powerline
#+begin_src emacs-lisp
(use-package powerline
  :init
  (powerline-default-theme)
)
#+end_src

** Terminal colours
#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :ensure t)
#+END_SRC

* Tools
** Package management
I prefer using [[https://brew.sh/][Homebrew]] for managing packages on macOS and it does not require =sudo= to install packages.
#+begin_src emacs-lisp
(use-package system-packages
  :init
  (setq
    system-packages-use-sudo nil
    system-packages-package-manager 'brew)
)
#+end_src
* Modes
** Company
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+begin_src emacs-lisp
(use-package company
  :pin melpa-stable
  :init
  (global-company-mode)
)
#+end_src
** Evil
[[https://github.com/emacs-evil][Evil]] is an =vi= layer for Emacs. I used =vim= for many years and I prefer to use these keybindings.
#+begin_src emacs-lisp
(use-package evil
  :config
  (evil-mode)
)
#+end_src

Add support increasing and decreasing numbers:
#+begin_src emacs-lisp
(use-package evil-numbers
  :bind
  ("C-c +" . evil-numbers/inc-at-pt)
  ("C-c -" . evil-numbers/dec-at-pt)
)
#+end_src

=evil-surround= is all about "surroundings": parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.
#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src
** Flycheck
[[https://www.flycheck.org/en/latest/][Flycheck]] enabled syntax checking for many languages and file types (50+).
#+begin_src emacs-lisp
(use-package flycheck
  :custom
  (flycheck-javascript-eslint-executable "eslint_d")
  (flycheck-keymap-prefix (kbd "C-c C-f"))
  :init (global-flycheck-mode)
)
#+end_src
** Helm
#+begin_quote
[[https://emacs-helm.github.io/helm/][Helm]] is an Emacs framework for incremental completions and narrowing selections. It helps to rapidly complete file names, buffer names, or any other Emacs interactions requiring selecting an item from a list of possible choices.
#+end_quote

#+begin_src emacs-lisp
(use-package helm
  :config
  (helm-mode))
#+end_src
*** TODO https://github.com/emacs-helm/helm-system-packages

** Org
*** Appearance
=org-bullets= replaces the leading stars with Unicode characters.
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
)
#+end_src

*** Journal
#+begin_src emacs-lisp
(use-package org-journal
  :after org
  :config
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))
  :custom
  (org-journal-file-type 'yearly)
  (org-journal-encrypt-journal t)
)
#+end_src
*** Capture
Capture templates for Org mode. I use these templates for taking notes quickly, completing a checklist, or doing a specific exercise.

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  `(
    ("5" "5 minutes journal" entry (file+datetree "~/org/5-minutes-journal.org")
         (file "~/dotfiles/org-mode/templates/5-minute-journal.org"))
    ("f" "Fear setting" entry (file "~/org/fears.org")
         (file "~/dotfiles/org-mode/templates/fear-setting.org"))
    ("j" "Journal entry" entry (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
    ("t" "Task [Inbox]" entry (file "~/org/inbox.org")
	 "* TODO %i%?")
    ("w" "Weekly Review" entry (file "~/org/weekly-review.org")
         (file "~/dotfiles/org-mode/templates/weekly-review.org"))
  )
)
#+END_SRC
*** Evil
There are special shortcuts for =evil-mode=.
#+begin_src emacs-lisp
(use-package evil-org
  :after (org evil)
  :custom
  (evil-want-C-i-jump nil)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  :hook
  (org-mode . evil-org-mode)
  (evil-org-mode . (lambda ()(evil-org-set-key-theme)))
)
#+end_src
*** Export
Org-mode has a powerful export backend, so documents or parts of them can be shared easily.

#+begin_src emacs-lisp
(require 'ox-confluence)
(use-package ox-jira)
(use-package ox-slack)
#+end_src
** RestClient
#+begin_quote
This is a tool to manually explore and test HTTP REST webservices. Runs queries from a plain-text query sheet, displays results as a pretty-printed XML, JSON and even images.
#+end_quote

#+begin_src emacs-lisp
(use-package restclient)
(use-package restclient-helm)
#+end_src

=org-babel= support:
#+begin_src emacs-lisp
(use-package ob-restclient
  :config
  (org-babel-do-load-languages
    'org-babel-load-languages
    (add-to-list 'org-babel-load-languages '(restclient . t) t)
  )
)
#+end_src

Add completion support to =company-mode=:
#+begin_src emacs-lisp
(use-package company-restclient
  :config
  (add-to-list 'company-backends 'company-restclient)
)
#+end_src
* File types
This section adds support for various file types.
** Bazel
#+begin_src emacs-lisp
(use-package bazel-mode
  :quelpa (
    (bazel-mode :fetcher github :repo "bazelbuild/emacs-bazel-mode")
    :upgrade t
  )
)
#+end_src
** Ledger
Ledger is a commandline account software. These packages make easier editing a =.ledger= file by providing syntax highlight, tab-completion, etc.
#+begin_src emacs-lisp
(use-package ledger-mode
  :pin melpa
  :mode "\\.ledger\\'"
  :init
  (setq
    ledger-post-account-alignment-column 2
    ledger-post-amount-alignment-column  64
  )
  :config
  (setq ledger-default-date-format ledger-iso-date-format)
  :hook
  (ledger-mode . (lambda  ()
    (setq-local tab-always-indent 'complete)
    (setq-local completion-cycle-threshold t)
    (setq-local ledger-complete-in-steps t)))
)
(use-package flycheck-ledger
  :pin melpa
  :after ledger-mode)
(use-package evil-ledger
  :after ledger-mode)
#+end_src

Activate Org Babel support:
#+begin_src emacs-lisp
(require 'ob-ledger)
(add-to-list 'org-babel-load-languages '(ledger . t) t)
#+end_src
** Markdown
[[https://spec.commonmark.org/][Markdown]] is one of the most popular markup languages.
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure-system-package (multimarkdown . "brew install multimarkdown")
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
** PlantUML
UML diagrams make communication of ideas easier. PlantUML is a great piece of software that enables codifying diagrams. This allows me to have nice, autogenerated layouts and versioning.

PlantUML mode adds syntax highlighting and embedded rendering for diagram.

[[https://brew.sh/][Homebrew]] installs versions of a package into separate directories before it links them into the path. PlantUML needs the path of the =jar= file, therefore the latest version has to be looked up the directory tree.

#+begin_src emacs-lisp
(use-package plantuml-mode
  :ensure-system-package (plantuml . "brew install plantuml")
  :mode "\\.plantuml\\'"
  :custom
  (plantuml-jar-path (car (last (file-expand-wildcards "/usr/local/Cellar/plantuml/*/libexec/plantuml.jar"))))
  (org-plantuml-jar-path plantuml-jar-path)
)
(use-package flycheck-plantuml
  :after plantuml-mode
  :config
  (flycheck-plantuml-setup))
#+end_src
** YAML
[[https://yaml.org/][YAML]] format is widely adopted for configuration files.

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\(\\.\\(yaml\\|yml\\)\\)\\'"
)
(use-package flycheck-yamllint
  :ensure-system-package (yamllint . "brew install yamllint")
  :defer t
  :after flycheck
  :init
  (add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup)
)
#+end_src

* Programming
:PROPERTIES:
:header-args: :results silent
:END:

** Tools
*** Diffs
=diff-hl= allows to highlight changes in a file under version control. Changes are marked on the left side of the window.
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (diff-hl-mode)
  (diff-hl-flydiff-mode)
)
#+end_src

*** Magit
[[https://magit.vc/][Magit]] is a =git= client for Emacs: It has keybindings for =evil= as well.

#+begin_src emacs-lisp
(use-package magit
  :bind (
    ("C-x g" . magit-status)
  )
  :pin melpa-stable)
(use-package evil-magit
  :after (magit evil)
  :pin melpa-stable
)
#+end_src

*** Projectile
It is a library to help work with projects and navigate around files.

#+begin_src emacs-lisp
(use-package projectile
  :pin melpa-stable
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
)
#+end_src

=ripgrep= integration for faster searching:
#+begin_src emacs-lisp
(use-package rg
  :ensure-system-package (rg . ripgrep)
  :config
  (rg-enable-default-bindings)
)
#+end_src
Commands:
- =rg= :: interactive input for search
- =rg-project= :: search in e.g. a Projectile project
Key bindings:
- =C-c s p= :: search in e.g. a Projectile project

*** Smartparens
Smartparens is a minor mode for dealing with pairs in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package smartparens)
#+END_SRC

*** Treemacs
#+begin_quote
Treemacs is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing basic file management utilities. Specifically a quick feature overview looks as follows:
#+end_quote

#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :pin melpa-stable)
#+end_src

Projectile integration
#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :pin melpa-stable)
#+end_src
*** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :pin melpa-stable
  :config
  (yas-global-mode 1)
)
(use-package yasnippet-snippets)
#+end_src

** Language Support
*** Java
I prefer to format Java code according to the Google style guide:

#+begin_src emacs-lisp
(use-package google-c-style
  :hook
  (java-mode . google-set-c-style)
  (java-mode . google-make-newline-indent)
)
#+end_src

Smartparens always help:
#+begin_src emacs-lisp
(add-hook 'java-mode-hook #'smartparens-mode)
#+end_src

Add a few useful Java snippets:
#+begin_src emacs-lisp
(use-package java-snippets)
#+end_src
**** Gradle
Gradle uses Groovy syntax:
#+begin_src emacs-lisp
(use-package groovy-mode
  :mode "\\.groovy\\'\\|\\.gradle\\'")
#+end_src

*** Javascript
Javascript development requires [[https://nodejs.org/en/][node.js]] to be installed.

Homebrew installs versioned packages like =node= into a separate directory and it has to be added to the =$PATH= variable to be detected.

=npm= installs project specific binaries into the =node_modules/.bin= directory. This directory has to be added to =$PATH= to be detected. =add-node-modules-path= package can take care of this.

#+begin_src emacs-lisp
(use-package add-node-modules-path
  :ensure-system-package node
  :hook (
    (js-mode . add-node-modules-path)
    (jest-mode . add-node-modules-path)
  )
)
#+end_src

=js2-mode= does not support syntax highlighting within the =render= blocks for HTML/XML currently. Emacs 27 will introduce support for this. [[https://github.com/mooz/js2-mode/pull/523][PR#523]] will implement it.
#+begin_src emacs-lisp
(use-package js2-mode
  :interpreter (
    ("node" . js2-mode)
  )
  :init
  (setq js-indent-level 2)
  :hook (js-mode . js2-minor-mode)
)
#+end_src

Smartparens always help:
#+begin_src emacs-lisp
(add-hook 'js-mode-hook #'smartparens-mode)
#+end_src

**** Linting
Eslint can automatically format Javascript code by using Prettier. =eslintd= can make it faster by running it as a daemon. It has to be also installed and present in the =$PATH=.

#+begin_src emacs-lisp
(use-package eslintd-fix
  :ensure-system-package (eslint_d . "npm install -g eslint_d")
  :hook (js-mode . eslintd-fix-mode)
)
#+end_src
**** ReactJS
Emacs 27.1+ has a native support for =.jsx= files. I've compiled the HEAD version of Emacs to get this feature.

#+begin_src emacs-lisp
(use-package react-snippets)
#+end_src
**** Testing
Jest is one of the most popular Javascript testing framework. It is widely used across frameworks. I mainly use it with React and for applications that are created with =create-react-app=, so it is safe to assume that =npm test= is configured correctly.
#+begin_src emacs-lisp
(use-package jest
  :config
  (setq jest-executable "npm test --")
)
(use-package flycheck-jest)
#+end_src
*** TypeScript
I use the =js-mode= for TypeScript as well because =lsp-mode= is backed by the TypeScript language server.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.tsx\\'" . js-mode))
#+end_src
** [[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol support for Emacs]]
=lsp-mode= requires server implementations to be installed on operating system level.

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :ensure-system-package (
    ; Javascript and TypeScript support
    (tsserver . "npm install -g typescript")
    (typescript-language-server . "npm install -g typescript-language-server")
  )
  :init
  (setq
    lsp-enable-indentation nil
    lsp-use-native-json t
  )
  :hook (
    (js-mode . lsp-deferred)
  )
)
#+END_SRC
=lsp-deferred= allows to delay the LSP startup until the buffer is visible.

#+BEGIN_SRC emacs-lisp
(use-package company-lsp)
(use-package lsp-ui
  :commands lsp-ui-mode)
(use-package helm-lsp
  :commands helm-lsp-workspace-symbol)
#+END_SRC

Debug Adapter Protocol implementation for Emacs.
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))
#+END_SRC

Treemacs integration allows to have an Eclipse style explorer view in a sidebar.
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :after lsp-mode
  :commands lsp-treemacs-errors-list)
#+END_SRC

Eclipse Language Server extension configured to follow the Google style guide.

#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :after lsp
  :init
  (setq
    lsp-java-auto-build nil
    lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml"
    lsp-java-format-settings-profile "GoogleStyle"
    lsp-java-save-action-organize-imports t)
  :config
  (add-hook 'java-mode-hook 'lsp)
)
#+END_SRC
Notes:
- It is important to specify the profile for the format settings to make it work.
- I do not need automatic building as I intend to use Bazel.
** Remote File Editing
As Emacs is not installed on remote machine as =vi= is usually. It is better to connect to remote host through Emacs and edit files transparently.
*** TRAMP
#+begin_src emacs-lisp
(use-package tramp
  :init
  (setq tramp-default-method "ssh")
  (setq tramp-terminal-type "tramp")
)
#+end_src

TRAMP might hangs if the target server does not use a standard shell with =$= as a separator (e.g. oh-my-zsh package). I set the terminal type variable (=$TRAMP=) to =tramp=, so the shell can act differently and revert to the default behaviour to work correctly with TRAMP.

Following section has to be included into the =.zshrc= file:
#+begin_src sh
if [[ "$TERM" == "tramp" ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  if whence -w precmd >/dev/null; then
      unfunction precmd
  fi
  if whence -w preexec >/dev/null; then
      unfunction preexec
  fi
  PS1='$ '
fi
#+end_src
* Troubleshooting
:PROPERTIES:
:header-args: :results silent
:END:
When Emacs or =use-package= tries to download an outdated version of a package, the package cache has to be refreshed.

#+begin_src emacs-lisp
(package-refresh-contents)
#+end_src
