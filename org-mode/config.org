#+TITLE: Emacs Configuration

* Theme and appearance
Customising Emacs appearance with the goal of having it as minimal as possible:

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message ""
      inhibit-startup-message t)
;; Appearance
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . light))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(setq-default show-trailing-whitespace t)
#+END_SRC

** Dracula theme
This is a dark theme that is available for many applications.

Homepage: https://draculatheme.com/

#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :config
  (load-theme 'dracula t)
)
#+END_SRC

Theme for Terminal.app in macOS:

#+BEGIN_SRC shell
export DRACULA_THEME_LOCATION=$HOME/apps/dracula-theme
mkdir -p ~/apps/dracula-theme
git clone https://github.com/dracula/terminal-app.git $DRACULA_THEME_LOCATION/terminal

git clone https://github.com/dracula/xcode.git $DRACULA_THEME_LOCATION/xcode
mkdir -p ~/Library/Developer/Xcode/UserData/FontAndColorThemes/
ln -s $DRACULA_THEME/Dracula.xccolortheme ~/Library/Developer/Xcode/UserData/FontAndColorThemes/Dracula.xccolortheme
#+END_SRC

** Powerline
#+begin_src emacs-lisp
(use-package powerline
  :init
  (powerline-default-theme)
)
#+end_src

** Terminal colours
#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :ensure t)
#+END_SRC

* File types
This section adds support for various file types.
** Ledger
Ledger is a commandline account software. These packages make easier editing a =.ledger= file by providing syntax highlight, tab-completion, etc.
#+begin_src emacs-lisp
(use-package ledger-mode
  :pin melpa
  :mode "\\.ledger\\'"
  :config
  (setq ledger-default-date-format ledger-iso-date-format)
  :hook
  (ledger-mode . (lambda  ()
    (setq-local tab-always-indent 'complete)
    (setq-local completion-cycle-threshold t)
    (setq-local ledger-complete-in-steps t)))
)
(use-package flycheck-ledger
  :pin melpa
  :after ledger-mode)
(use-package evil-ledger
  :after ledger-mode)
#+end_src

* Org mode
** Capture
Capture templates for Org mode. I use these templates for taking notes quickly, completing a checklist, or doing a specific exercise.

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  `(
    ("5" "5 minutes journal" entry (file+datetree "~/org/5-minutes-journal.org")
         (file "~/dotfiles/org-mode/templates/5-minute-journal.org"))
    ("f" "Fear setting" entry (file "~/org/fears.org")
         (file "~/dotfiles/org-mode/templates/fear-setting.org"))
    ("j" "Journal entry" entry (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
    ("t" "Task [Inbox]" entry (file "~/org/inbox.org")
	 "* TODO %i%?")
    ("w" "Weekly Review" entry (file "~/org/weekly-review.org")
         (file "~/dotfiles/org-mode/templates/weekly-review.org"))
  )
)
#+END_SRC
** Export
Org-mode has a powerful export backend, so documents or parts of them can be shared easily.

#+begin_src emacs-lisp
(use-package ox-jira)
(use-package ox-minutes)
(use-package ox-slack)
#+end_src
* Programming
:PROPERTIES:
:header-args: :results silent
:END:

** Tools
*** Company
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+begin_src emacs-lisp
(use-package company
  :pin melpa-stable
  :init
  (global-company-mode)
)
#+end_src
*** Diffs
=diff-hl= allows to highlight changes in a file under version control. Changes are marked on the left side of the window.
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (diff-hl-mode)
  (diff-hl-flydiff-mode)
)
#+end_src

*** Magit
[[https://magit.vc/][Magit]] is a =git= client for Emacs: It has keybindings for =evil= as well.

#+begin_src emacs-lisp
(use-package magit
  :bind (
    ("C-x g" . magit-status)
  )
  :pin melpa-stable)
(use-package evil-magit
  :after (magit evil)
  :pin melpa-stable
)
#+end_src

*** Projectile
It is a library to help work with projects and navigate around files.

#+begin_src emacs-lisp
(use-package projectile
  :pin melpa-stable
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
)
#+end_src

*** Treemacs
#+begin_quote
Treemacs is a file and project explorer similar to NeoTree or vimâ€™s NerdTree, but largely inspired by the Project Explorer in Eclipse. It shows the file system outlines of your projects in a simple tree layout allowing quick navigation and exploration, while also possessing basic file management utilities. Specifically a quick feature overview looks as follows:
#+end_quote

#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :pin melpa-stable)
#+end_src

Projectile integration
#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile
  :pin melpa-stable)
#+end_src
*** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :pin melpa-stable)
#+end_src
** [[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol support for Emacs]]
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
)
#+END_SRC
=lsp-deferred= allows to delay the LSP startup until the buffer is visible.

#+BEGIN_SRC emacs-lisp
(use-package company-lsp)
(use-package lsp-ui
  :commands lsp-ui-mode)
#+END_SRC

Debug Adapter Protocol implementation for Emacs.
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))
#+END_SRC

Treemacs integration allows to have an Eclipse style explorer view in a sidebar.
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :after lsp-mode
  :commands lsp-treemacs-errors-list)
#+END_SRC
** Language Support
*** Java
I prefer to format Java code according to the Google style guide:

#+begin_src emacs-lisp
(use-package google-c-style
  :hook
  (java-mode . google-set-c-style)
  (java-mode . google-make-newline-indent)
)
#+end_src

Eclipse Language Server extension configured to follow the Google style guide.

#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :after lsp
  :init
  (setq
    lsp-java-auto-build nil
    lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml"
    lsp-java-format-settings-profile "GoogleStyle"
    lsp-java-save-action-organize-imports t)
  :config
  (add-hook 'java-mode-hook 'lsp)
)
#+END_SRC
Notes:
- It is important to specify the profile for the format settings to make it work.
- I do not need automatic building as I intend to use Bazel.

Hook up the [[https://github.com/Fuco1/smartparens][smartparens]] to Java:

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :hook
  (java-mode . smartparens-mode))
#+END_SRC

*** Javascript
Javascript development requires [[https://nodejs.org/en/][node.js]] to be installed. Current LTS version is 10.

#+begin_src sh
brew install node@10
#+end_src

To use this version of node.js, it has to be added to the =PATH= environmental variable.
#+begin_src emacs-lisp
(setenv "PATH" (concat
  "/usr/local/opt/node@10/bin:"
  (getenv "PATH"))
)
#+end_src

=js2-mode= does not support syntax highlighting within the =render= blocks for HTML/XML currently. Emacs 27 will introduce support for this. [[https://github.com/mooz/js2-mode/pull/523][PR#523]] will implement it.
#+begin_src emacs-lisp
(use-package js2-mode
  :mode (
    ("\\.js\\'" . js2-mode)
    ("\\.jsx\\'" . js2-jsx-mode)
  )
  :interpreter (
    ("node" . js2-mode)
    ("node" . js2-jsx-mode)
  )
  :hook
  (js-mode-hook . js2-minor-mode)
)
#+end_src

[[https://indium.readthedocs.io/en/latest/][Indium]] is a development environment that can offer debugging capabilities. It requires the =indium= package to be installed globally via npm.
#+begin_src sh
npm install -g indium
#+end_src

#+begin_src emacs-lisp
(use-package indium)
#+end_src
** Remote File Editing
As Emacs is not installed on remote machine as =vi= is usually. It is better to connect to remote host through Emacs and edit files transparently.
*** TRAMP
#+begin_src emacs-lisp
(use-package tramp
  :init
  (setq tramp-default-method "ssh")
  (setq tramp-terminal-type "tramp")
)
#+end_src

TRAMP might hangs if the target server does not use a standard shell with =$= as a separator (e.g. oh-my-zsh package). I set the terminal type variable (=$TRAMP=) to =tramp=, so the shell can act differently and revert to the default behaviour to work correctly with TRAMP.

Following section has to be included into the =.zshrc= file:
#+begin_src sh
if [[ "$TERM" == "tramp" ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  if whence -w precmd >/dev/null; then
      unfunction precmd
  fi
  if whence -w preexec >/dev/null; then
      unfunction preexec
  fi
  PS1='$ '
fi
#+end_src
* Troubleshooting
:PROPERTIES:
:header-args: :results silent
:END:
When Emacs or =use-package= tries to download an outdated version of a package, the package cache has to be refreshed.

#+begin_src emacs-lisp
(package-refresh-contents)
#+end_src
