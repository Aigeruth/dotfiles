#+TITLE: Emacs Configuration

* Theme and appearance
Customising Emacs appearance with the goal of having it as minimal as possible:

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message ""
      inhibit-startup-message t)
;; Appearance
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . light))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

#+END_SRC

** Dracula theme
This is a dark theme that is available for many applications.

Homepage: https://draculatheme.com/

#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :config
  (load-theme 'dracula t)
)
#+END_SRC

Theme for Terminal.app in macOS:

#+BEGIN_SRC shell
export DRACULA_THEME_LOCATION=$HOME/apps/dracula-theme
mkdir -p ~/apps/dracula-theme
git clone https://github.com/dracula/terminal-app.git $DRACULA_THEME_LOCATION/terminal

git clone https://github.com/dracula/xcode.git $DRACULA_THEME_LOCATION/xcode
mkdir -p ~/Library/Developer/Xcode/UserData/FontAndColorThemes/
ln -s $DRACULA_THEME/Dracula.xccolortheme ~/Library/Developer/Xcode/UserData/FontAndColorThemes/Dracula.xccolortheme
#+END_SRC

** Powerline
#+begin_src emacs-lisp
(use-package powerline
  :init
  (powerline-default-theme)
)
#+end_src

** Terminal colours
#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :ensure t)
#+END_SRC

* Org mode
** Capture
Capture templates for Org mode.

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  `(
    ("5" "5 minutes journal" entry (file+datetree "~/org/5-minutes-journal.org")
         (file "~/dotfiles/org-mode/templates/5-minute-journal.org"))
    ("j" "Journal entry" entry (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
    ("t" "Task [Inbox]" entry (file "~/org/inbox.org")
	 "* TODO %i%?")
    ("w" "Weekly Review" entry (file "~/org/weekly-review.org")
         (file "~/dotfiles/org-mode/templates/weekly-review.org"))
  )
)
#+END_SRC
* Programming
:PROPERTIES:
:header-args: :results silent
:END:
[[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol support for Emacs]]b.

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
)

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :hook
  (lsp-mode . lsp-ui-mode)
)
(use-package company-lsp
  :commands company-lsp)
#+END_SRC

Projectile is a library to help work with projects and navigate around files.

#+begin_src emacs-lisp
(use-package projectile
  :pin melpa-stable
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
)
#+end_src

** Java
Eclipse Language Server

#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :after lsp-mode
  :hook
  (java-mode . lsp-java-enable))
#+END_SRC

** Javascript
Javascript development requires [[https://nodejs.org/en/][node.js]] to be installed. Current LTS version is 10.

#+begin_src sh
brew install node@10
#+end_src

To use this version of node.js, it has to be added to the =PATH= environmental variable.
#+begin_src emacs-lisp
(setenv "PATH" (concat
  "/usr/local/opt/node@10/bin:"
  (getenv "PATH"))
)
#+end_src

=js2-mode= does not support syntax highlighting within the =render= blocks for HTML/XML currently. Emacs 27 will introduce support for this. [[https://github.com/mooz/js2-mode/pull/523][PR#523]] will implement it.
#+begin_src emacs-lisp
(use-package js2-mode
  :mode (
    ("\\.js\\'" . js2-mode)
    ("\\.jsx\\'" . js2-jsx-mode)
  )
  :interpreter (
    ("node" . js2-mode)
    ("node" . js2-jsx-mode)
  )
  :hook
  (js-mode-hook . js2-minor-mode)
)
#+end_src

[[https://indium.readthedocs.io/en/latest/][Indium]] is a development environment that can offer debugging capabilities. It requires the =indium= package to be installed globally via npm.
#+begin_src sh
npm install -g indium
#+end_src

#+begin_src emacs-lisp
(use-package indium)
#+end_src
* Troubleshooting
:PROPERTIES:
:header-args: :results silent
:END:
When Emacs or =use-package= tries to download an outdated version of a package, the package cache has to be refreshed.

#+begin_src emacs-lisp
(package-refresh-contents)
#+end_src
